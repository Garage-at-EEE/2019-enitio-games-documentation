/*-----------------------------------------------*/
/*-----------------------------------------------*/
/*-----------------------------------------------*/
/* DEFINE THE STATION INDEX HERE ----------------*/
/*-----------------------------------------------*/
#define STATION_INDEX 4 // A = 1, B = 2, C = 3, D = 4
/*-----------------------------------------------*/
/* DEFINE ENCRYPTION FUNCTION HERE --------------*/
/*-----------------------------------------------*/
int encryptA(int input) {
  return input + 2;
}

int encryptB(int input) {
  return input * 3 + 4;
}

int encryptC(int input) {
  return input * input;
}

int encryptD(int input) {
  return input % 4;
}
/*-----------------------------------------------*/
/*-----------------------------------------------*/
/*-----------------------------------------------*/
/*-----------------------------------------------*/

#include <Keypad.h>
#include <TM1637.h>
#include <Adafruit_NeoPixel.h>
#include <Time.h>

/* Set up keypad */

const byte ROWS = 4;
const byte COLS = 3;

char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};

byte rowPins[ROWS] = {8, 7, 6, 5};
byte colPins[COLS] = {4, 3, 2};

Keypad keypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

/* Set up 7-segment */

const byte CLK = 10;
const byte DIO = 9;

TM1637 sevseg = TM1637(CLK, DIO);

unsigned long lastShownTime;
const int segShowTime = 1000;

/* Set up NeoPixel */

const byte PIX = 11;
const byte NUM_PIXELS = 3;

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUM_PIXELS, PIX);

const int blinkPeriod = 500; //in ms
unsigned long currentTime, lastBlinkTime;
bool isOn;

/* Set up the gameplay */

const byte myIndex = STATION_INDEX; // A = 1, B = 2, C = 3, D = 4
uint32_t color = getColor();

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  sevseg.init();
  sevseg.set(BRIGHT_TYPICAL);
  segAllZeros();

  pixels.begin();

  pixelsOn();
  isOn = true;
}

void loop() {
  currentTime = millis();

  if (currentTime - lastShownTime > segShowTime) {
    segAllZeros();
  }

  int input = (int)keypad.getKey() - 48;
  if (input > -48) {
    Serial.println(input);
  }
  int code;

  if (input >= 0) {
    Serial.println("Encrypting");
    code = encrypt(input);
    Serial.println(code);
    if (code != 0) {
      sevseg.displayNum(code);
    }
    else {
      sevseg.clearDisplay();
      sevseg.display(3, 0);
    }
    lastShownTime = millis();
  }

  if (currentTime - lastBlinkTime > blinkPeriod) {

    if (isOn) {
      pixels.clear();
      pixels.show();
      isOn = false;
    } else {
      pixelsOn();
      isOn = true;
    }
    lastBlinkTime = millis();
  }


}

int encrypt(int input) {

  int code;

  switch (myIndex) {
    case 1:
      return encryptA(input);
    case 2:
      return encryptB(input);
    case 3:
      return encryptC(input);
    case 4:
      return encryptD(input);
    default:
      return -1;
  }

}

uint32_t getColor() {
  switch (myIndex) {
    case 1:
      return pixels.Color(150, 0, 0); // red
    case 2:
      return pixels.Color(0, 150, 0); //green
    case 3:
      return pixels.Color(0, 0, 150); //blue
    case 4:
      return pixels.Color(150, 150, 0); //yellow
  }
}

void pixelsOn() {
  for (int i = 0; i < NUM_PIXELS; i++) {
    pixels.setPixelColor(i, color);
  }

  pixels.show();
}

void segAllZeros() {
  for (int i = 0; i < 4; i++) {
    sevseg.display(i, 0);
  }
}
